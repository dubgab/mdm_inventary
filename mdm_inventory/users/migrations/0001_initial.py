# Generated by Django 3.0.11 on 2021-01-02 21:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='Primer nombre')),
                ('last_name', models.CharField(max_length=50, verbose_name='Apellido')),
                ('dni', models.CharField(max_length=50, unique=True, verbose_name='DNI')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: +999999999. Up to 15 digits allowed.', regex='\\+?1?\\d{9,15}$')])),
                ('full_name', models.CharField(max_length=50, verbose_name='Nombre completo')),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='address.Address', verbose_name='client_address')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date time on wich the object was created', verbose_name='Creado el')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Date time on wich the object was modified', verbose_name='Modificado el')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exist'}, max_length=150, unique=True, verbose_name='Correo Electr√≥nico')),
                ('is_manager', models.BooleanField(default=False, verbose_name='Gerente')),
                ('is_cashier', models.BooleanField(default=False, verbose_name='Cajero')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Superusuario')),
                ('is_verified', models.BooleanField(default=False, help_text='Set true when the user have verified its email address.', verbose_name='Verificado')),
                ('profile_picture', models.ImageField(default='users/pictures/user.png', max_length=250, upload_to='users/pictures/', verbose_name='Foto de Perfil')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['created', 'modified'],
                'get_latest_by': ['-created', '-modified'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
